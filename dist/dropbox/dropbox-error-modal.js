"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactDom = _interopRequireDefault(require("react-dom"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); } // Copyright (c) 2023 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
var WIDTH = 400;
var HEIGHT = 800;
var style = {
  borther: 0
};
var Frame = /*#__PURE__*/function (_Component) {
  _inherits(Frame, _Component);
  var _super = _createSuper(Frame);
  function Frame() {
    var _this;
    _classCallCheck(this, Frame);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "root", /*#__PURE__*/(0, _react.createRef)());
    _defineProperty(_assertThisInitialized(_this), "innerHtml", /*#__PURE__*/(0, _react.createRef)());
    _defineProperty(_assertThisInitialized(_this), "renderFrameContents", function () {
      var doc = _this.root.current.contentDocument;
      if (doc.readyState === 'complete') {
        _reactDom["default"].render( /*#__PURE__*/_react["default"].createElement("html", {
          ref: _this.innerHtml
          // eslint-disable-next-line react/no-danger
          ,
          dangerouslySetInnerHTML: {
            __html: _this.props.children
          }
        }), doc);
      } else {
        setTimeout(_this.renderFrameContents.bind(_assertThisInitialized(_this)), 0);
      }
    });
    return _this;
  }
  _createClass(Frame, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.renderFrameContents();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      this.renderFrameContents();
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      _reactDom["default"].unmountComponentAtNode(this.root.current.contentDocument);
    }
  }, {
    key: "render",
    value: function render() {
      return /*#__PURE__*/_react["default"].createElement("iframe", {
        width: "".concat(WIDTH, "px"),
        height: "".concat(HEIGHT, "px"),
        style: style,
        ref: this.root
      });
    }
  }]);
  return Frame;
}(_react.Component);
exports["default"] = Frame;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfcmVhY3REb20iLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0Iiwib2JqIiwiX19lc01vZHVsZSIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsIm5vZGVJbnRlcm9wIiwiV2Vha01hcCIsImNhY2hlQmFiZWxJbnRlcm9wIiwiY2FjaGVOb2RlSW50ZXJvcCIsIl90eXBlb2YiLCJjYWNoZSIsImhhcyIsImdldCIsIm5ld09iaiIsImhhc1Byb3BlcnR5RGVzY3JpcHRvciIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwia2V5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiZGVzYyIsInNldCIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiY29uc3RydWN0b3IiLCJfY2xhc3NDYWxsQ2hlY2siLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiVHlwZUVycm9yIiwiX2RlZmluZVByb3BlcnRpZXMiLCJ0YXJnZXQiLCJwcm9wcyIsImkiLCJsZW5ndGgiLCJkZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiX3RvUHJvcGVydHlLZXkiLCJfY3JlYXRlQ2xhc3MiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJfaW5oZXJpdHMiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJjcmVhdGUiLCJ2YWx1ZSIsIl9zZXRQcm90b3R5cGVPZiIsIm8iLCJwIiwic2V0UHJvdG90eXBlT2YiLCJiaW5kIiwiX19wcm90b19fIiwiX2NyZWF0ZVN1cGVyIiwiRGVyaXZlZCIsImhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QiLCJfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0IiwiX2NyZWF0ZVN1cGVySW50ZXJuYWwiLCJTdXBlciIsIl9nZXRQcm90b3R5cGVPZiIsInJlc3VsdCIsIk5ld1RhcmdldCIsIlJlZmxlY3QiLCJjb25zdHJ1Y3QiLCJhcmd1bWVudHMiLCJhcHBseSIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwic2VsZiIsIl9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQiLCJSZWZlcmVuY2VFcnJvciIsInNoYW0iLCJQcm94eSIsIkJvb2xlYW4iLCJ2YWx1ZU9mIiwiZSIsImdldFByb3RvdHlwZU9mIiwiX2RlZmluZVByb3BlcnR5IiwiYXJnIiwiX3RvUHJpbWl0aXZlIiwiU3RyaW5nIiwiaW5wdXQiLCJoaW50IiwicHJpbSIsInRvUHJpbWl0aXZlIiwidW5kZWZpbmVkIiwicmVzIiwiTnVtYmVyIiwiV0lEVEgiLCJIRUlHSFQiLCJzdHlsZSIsImJvcnRoZXIiLCJGcmFtZSIsIl9Db21wb25lbnQiLCJfc3VwZXIiLCJfdGhpcyIsIl9sZW4iLCJhcmdzIiwiQXJyYXkiLCJfa2V5IiwiY29uY2F0IiwiY3JlYXRlUmVmIiwiZG9jIiwicm9vdCIsImN1cnJlbnQiLCJjb250ZW50RG9jdW1lbnQiLCJyZWFkeVN0YXRlIiwiUmVhY3RET00iLCJyZW5kZXIiLCJjcmVhdGVFbGVtZW50IiwicmVmIiwiaW5uZXJIdG1sIiwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwiLCJfX2h0bWwiLCJjaGlsZHJlbiIsInNldFRpbWVvdXQiLCJyZW5kZXJGcmFtZUNvbnRlbnRzIiwiY29tcG9uZW50RGlkTW91bnQiLCJjb21wb25lbnREaWRVcGRhdGUiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsInVubW91bnRDb21wb25lbnRBdE5vZGUiLCJ3aWR0aCIsImhlaWdodCIsIkNvbXBvbmVudCIsImV4cG9ydHMiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvY2xvdWQtcHJvdmlkZXJzL2Ryb3Bib3gvZHJvcGJveC1lcnJvci1tb2RhbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIDIwMjMgVWJlciBUZWNobm9sb2dpZXMsIEluYy5cclxuLy9cclxuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxyXG4vLyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXHJcbi8vIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcclxuLy8gdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxyXG4vLyBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcclxuLy8gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcclxuLy9cclxuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cclxuLy8gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXHJcbi8vXHJcbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcclxuLy8gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXHJcbi8vIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxyXG4vLyBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXHJcbi8vIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXHJcbi8vIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cclxuLy8gVEhFIFNPRlRXQVJFLlxyXG5cclxuaW1wb3J0IFJlYWN0LCB7Q29tcG9uZW50LCBjcmVhdGVSZWZ9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XHJcblxyXG5jb25zdCBXSURUSCA9IDQwMDtcclxuY29uc3QgSEVJR0hUID0gODAwO1xyXG5jb25zdCBzdHlsZSA9IHtib3J0aGVyOiAwfTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZyYW1lIGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICBjb21wb25lbnREaWRNb3VudCgpIHtcclxuICAgIHRoaXMucmVuZGVyRnJhbWVDb250ZW50cygpO1xyXG4gIH1cclxuICBjb21wb25lbnREaWRVcGRhdGUoKSB7XHJcbiAgICB0aGlzLnJlbmRlckZyYW1lQ29udGVudHMoKTtcclxuICB9XHJcblxyXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xyXG4gICAgUmVhY3RET00udW5tb3VudENvbXBvbmVudEF0Tm9kZSh0aGlzLnJvb3QuY3VycmVudC5jb250ZW50RG9jdW1lbnQpO1xyXG4gIH1cclxuXHJcbiAgcm9vdCA9IGNyZWF0ZVJlZigpO1xyXG4gIGlubmVySHRtbCA9IGNyZWF0ZVJlZigpO1xyXG5cclxuICByZW5kZXJGcmFtZUNvbnRlbnRzID0gKCkgPT4ge1xyXG4gICAgY29uc3QgZG9jID0gdGhpcy5yb290LmN1cnJlbnQuY29udGVudERvY3VtZW50O1xyXG4gICAgaWYgKGRvYy5yZWFkeVN0YXRlID09PSAnY29tcGxldGUnKSB7XHJcbiAgICAgIFJlYWN0RE9NLnJlbmRlcihcclxuICAgICAgICA8aHRtbFxyXG4gICAgICAgICAgcmVmPXt0aGlzLmlubmVySHRtbH1cclxuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9uby1kYW5nZXJcclxuICAgICAgICAgIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7XHJcbiAgICAgICAgICAgIF9faHRtbDogdGhpcy5wcm9wcy5jaGlsZHJlblxyXG4gICAgICAgICAgfX1cclxuICAgICAgICAvPixcclxuICAgICAgICBkb2NcclxuICAgICAgKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHNldFRpbWVvdXQodGhpcy5yZW5kZXJGcmFtZUNvbnRlbnRzLmJpbmQodGhpcyksIDApO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIHJlbmRlcigpIHtcclxuICAgIHJldHVybiA8aWZyYW1lIHdpZHRoPXtgJHtXSURUSH1weGB9IGhlaWdodD17YCR7SEVJR0hUfXB4YH0gc3R5bGU9e3N0eWxlfSByZWY9e3RoaXMucm9vdH0gLz47XHJcbiAgfVxyXG59XHJcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBb0JBLElBQUFBLE1BQUEsR0FBQUMsdUJBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLFNBQUEsR0FBQUMsc0JBQUEsQ0FBQUYsT0FBQTtBQUFpQyxTQUFBRSx1QkFBQUMsR0FBQSxXQUFBQSxHQUFBLElBQUFBLEdBQUEsQ0FBQUMsVUFBQSxHQUFBRCxHQUFBLGdCQUFBQSxHQUFBO0FBQUEsU0FBQUUseUJBQUFDLFdBQUEsZUFBQUMsT0FBQSxrQ0FBQUMsaUJBQUEsT0FBQUQsT0FBQSxRQUFBRSxnQkFBQSxPQUFBRixPQUFBLFlBQUFGLHdCQUFBLFlBQUFBLHlCQUFBQyxXQUFBLFdBQUFBLFdBQUEsR0FBQUcsZ0JBQUEsR0FBQUQsaUJBQUEsS0FBQUYsV0FBQTtBQUFBLFNBQUFQLHdCQUFBSSxHQUFBLEVBQUFHLFdBQUEsU0FBQUEsV0FBQSxJQUFBSCxHQUFBLElBQUFBLEdBQUEsQ0FBQUMsVUFBQSxXQUFB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