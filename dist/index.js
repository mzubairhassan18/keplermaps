"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.loadRemoteResourceSuccess = exports.loadRemoteResourceError = exports["default"] = exports.appReducer = void 0;
var _redux = require("redux");
var _reduxActions = require("redux-actions");
var _reducers = _interopRequireWildcard(require("@kepler.gl/reducers"));
var _processors = require("@kepler.gl/processors");
var _schemas = _interopRequireDefault(require("@kepler.gl/schemas"));
var _constants = require("@kepler.gl/constants");
var _actions = require("../actions");
var _defaultSettings = require("../constants/default-settings");
var _strings = require("../utils/strings");
var _handleActions, _composedUpdaters;
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); } // Copyright (c) 2023 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
// INITIAL_APP_STATE
var initialAppState = {
  appName: 'example',
  loaded: false,
  sampleMaps: [],
  // this is used to store sample maps fetch from a remote json file
  isMapLoading: false,
  // determine whether we are loading a sample map,
  error: null // contains error when loading/retrieving data/configuration
  // {
  //   status: null,
  //   message: null
  // }
};

// App reducer
var appReducer = (0, _reduxActions.handleActions)((_handleActions = {}, _defineProperty(_handleActions, _actions.INIT, function (state) {
  return _objectSpread(_objectSpread({}, state), {}, {
    loaded: true
  });
}), _defineProperty(_handleActions, _actions.LOAD_MAP_SAMPLE_FILE, function (state, action) {
  return _objectSpread(_objectSpread({}, state), {}, {
    sampleMaps: action.samples
  });
}), _defineProperty(_handleActions, _actions.SET_SAMPLE_LOADING_STATUS, function (state, action) {
  return _objectSpread(_objectSpread({}, state), {}, {
    isMapLoading: action.isMapLoading
  });
}), _handleActions), initialAppState);
exports.appReducer = appReducer;
var DEFAULT_EXPORT_MAP = _reducers.uiStateUpdaters.DEFAULT_EXPORT_MAP;

// combine app reducer and keplerGl reducer
// to mimic the reducer state of kepler.gl website
var demoReducer = (0, _redux.combineReducers)({
  // mount keplerGl reducer
  keplerGl: _reducers["default"].initialState({
    // In order to provide single file export functionality
    // we are going to set the mapbox access token to be used
    // in the exported file
    uiState: {
      exportMap: _objectSpread(_objectSpread({}, DEFAULT_EXPORT_MAP), {}, _defineProperty({}, _constants.EXPORT_MAP_FORMATS.HTML, _objectSpread(_objectSpread({}, DEFAULT_EXPORT_MAP[[_constants.EXPORT_MAP_FORMATS.HTML]]), {}, {
        exportMapboxAccessToken: _defaultSettings.AUTH_TOKENS.EXPORT_MAPBOX_TOKEN
      })))
    },
    visState: {
      loaders: [],
      // Add additional loaders.gl loaders here
      loadOptions: {} // Add additional loaders.gl loader options here
    }
  }),

  app: appReducer
});

// this can be moved into a action and call kepler.gl action
/**
 *
 * @param state
 * @param action {map: resultset, config, map}
 * @returns {{app: {isMapLoading: boolean}, keplerGl: {map: (state|*)}}}
 */
var loadRemoteResourceSuccess = function loadRemoteResourceSuccess(state, action) {
  // TODO: replace generate with a different function
  var datasetId = action.options.id || (0, _strings.generateHashId)(6);
  var dataUrl = action.options.dataUrl;
  var processorMethod = _processors.processCsvData;
  // TODO: create helper to determine file ext eligibility
  if (dataUrl.includes('.json') || dataUrl.includes('.geojson')) {
    processorMethod = _processors.processGeojson;
  }
  var datasets = {
    info: {
      id: datasetId
    },
    data: processorMethod(action.response)
  };
  var config = action.config ? _schemas["default"].parseSavedConfig(action.config) : null;
  var keplerGlInstance = _reducers.combinedUpdaters.addDataToMapUpdater(state.keplerGl.map,
  // "map" is the id of your kepler.gl instance
  {
    payload: {
      datasets: datasets,
      config: config,
      options: {
        centerMap: Boolean(!action.config)
      }
    }
  });
  return _objectSpread(_objectSpread({}, state), {}, {
    app: _objectSpread(_objectSpread({}, state.app), {}, {
      currentSample: action.options,
      isMapLoading: false // we turn off the spinner
    }),

    keplerGl: _objectSpread(_objectSpread({}, state.keplerGl), {}, {
      // in case you keep multiple instances
      map: keplerGlInstance
    })
  });
};
exports.loadRemoteResourceSuccess = loadRemoteResourceSuccess;
var loadRemoteResourceError = function loadRemoteResourceError(state, action) {
  var error = action.error,
    url = action.url;
  var errorNote = {
    type: 'error',
    message: error.message || "Error loading ".concat(url)
  };
  return _objectSpread(_objectSpread({}, state), {}, {
    app: _objectSpread(_objectSpread({}, state.app), {}, {
      isMapLoading: false // we turn of the spinner
    }),

    keplerGl: _objectSpread(_objectSpread({}, state.keplerGl), {}, {
      // in case you keep multiple instances
      map: _objectSpread(_objectSpread({}, state.keplerGl.map), {}, {
        uiState: _reducers.uiStateUpdaters.addNotificationUpdater(state.keplerGl.map.uiState, {
          payload: errorNote
        })
      })
    })
  });
};
exports.loadRemoteResourceError = loadRemoteResourceError;
var composedUpdaters = (_composedUpdaters = {}, _defineProperty(_composedUpdaters, _actions.LOAD_REMOTE_RESOURCE_SUCCESS, loadRemoteResourceSuccess), _defineProperty(_composedUpdaters, _actions.LOAD_REMOTE_RESOURCE_ERROR, loadRemoteResourceError), _composedUpdaters);
var composedReducer = function composedReducer(state, action) {
  if (composedUpdaters[action.type]) {
    return composedUpdaters[action.type](state, action);
  }
  return demoReducer(state, action);
};

// export demoReducer to be combined in website app
var _default = composedReducer;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,