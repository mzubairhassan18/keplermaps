"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.StyledInputLabel = exports.StyledErrorDescription = exports.StyledError = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _styledComponents = _interopRequireDefault(require("styled-components"));
var _defaultSettings = require("../../constants/default-settings");
var _reactIntl = require("react-intl");
var _components = require("@kepler.gl/components");
var _url = require("../../utils/url");
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7; // Copyright (c) 2023 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
// TODO: this will move onto kepler.gl core
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }
var propTypes = {
  onLoadRemoteMap: _propTypes["default"].func.isRequired
};
var StyledDescription = _styledComponents["default"].div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  font-size: 14px;\n  color: ", ";\n  line-height: 18px;\n  margin-bottom: 12px;\n"])), function (props) {
  return props.theme.labelColorLT;
});
var InputForm = _styledComponents["default"].div(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  flex-grow: 1;\n  padding: 32px;\n  background-color: ", ";\n"])), function (props) {
  return props.theme.panelBackgroundLT;
});
var StyledInput = _styledComponents["default"].input(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  width: 100%;\n  padding: ", ";\n  color: ", ";\n  height: ", ";\n  border: 0;\n  outline: 0;\n  font-size: ", ";\n\n  :active,\n  :focus,\n  &.focus,\n  &.active {\n    outline: 0;\n  }\n"])), function (props) {
  return props.theme.inputPadding;
}, function (props) {
  return props.error ? 'red' : props.theme.titleColorLT;
}, function (props) {
  return props.theme.inputBoxHeight;
}, function (props) {
  return props.theme.inputFontSize;
});
var StyledFromGroup = _styledComponents["default"].div(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  margin-top: 30px;\n  display: flex;\n  flex-direction: row;\n"])));
var StyledInputLabel = _styledComponents["default"].div(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n  font-size: 11px;\n  color: ", ";\n  letter-spacing: 0.2px;\n  ul {\n    padding-left: 12px;\n  }\n"])), function (props) {
  return props.theme.textColorLT;
});
exports.StyledInputLabel = StyledInputLabel;
var StyledError = _styledComponents["default"].div(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["\n  color: red;\n"])));
exports.StyledError = StyledError;
var StyledErrorDescription = _styledComponents["default"].div(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["\n  font-size: 14px;\n"])));
exports.StyledErrorDescription = StyledErrorDescription;
var Error = function Error(_ref) {
  var error = _ref.error,
    url = _ref.url;
  return /*#__PURE__*/_react["default"].createElement(StyledError, null, /*#__PURE__*/_react["default"].createElement(StyledErrorDescription, null, url), /*#__PURE__*/_react["default"].createElement(StyledErrorDescription, null, error.message));
};
var LoadRemoteMap = /*#__PURE__*/function (_Component) {
  _inherits(LoadRemoteMap, _Component);
  var _super = _createSuper(LoadRemoteMap);
  function LoadRemoteMap() {
    var _this;
    _classCallCheck(this, LoadRemoteMap);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "state", {
      dataUrl: '',
      error: null,
      submitted: false
    });
    _defineProperty(_assertThisInitialized(_this), "onMapUrlChange", function (e) {
      _this.setState({
        dataUrl: e.target.value,
        error: !(0, _url.validateUrl)(e.target.value) ? {
          message: 'Incorrect URL'
        } : null
      });
    });
    _defineProperty(_assertThisInitialized(_this), "onLoadRemoteMap", function () {
      var _this$state = _this.state,
        dataUrl = _this$state.dataUrl,
        error = _this$state.error;
      _this.setState({
        submitted: true
      });
      if (!dataUrl || error) {
        return;
      }
      _this.props.onLoadRemoteMap({
        dataUrl: dataUrl
      });
    });
    return _this;
  }
  _createClass(LoadRemoteMap, [{
    key: "render",
    value: function render() {
      var _this$props$option;
      var displayedError = this.props.error || this.state.submitted ? this.state.error : null;
      return /*#__PURE__*/_react["default"].createElement("div", null, /*#__PURE__*/_react["default"].createElement(InputForm, null, /*#__PURE__*/_react["default"].createElement(StyledDescription, null, /*#__PURE__*/_react["default"].createElement(_reactIntl.FormattedMessage, {
        id: 'loadRemoteMap.description'
      })), /*#__PURE__*/_react["default"].createElement(StyledInputLabel, null, /*#__PURE__*/_react["default"].createElement(_reactIntl.FormattedMessage, {
        id: 'loadRemoteMap.message'
      })), /*#__PURE__*/_react["default"].createElement(StyledInputLabel, null, /*#__PURE__*/_react["default"].createElement(_reactIntl.FormattedMessage, {
        id: 'loadRemoteMap.examples'
      }), /*#__PURE__*/_react["default"].createElement("ul", null, /*#__PURE__*/_react["default"].createElement("li", null, "https://your.map.url/map.json"), /*#__PURE__*/_react["default"].createElement("li", null, "http://your.map.url/data.csv"))), /*#__PURE__*/_react["default"].createElement(StyledInputLabel, null, /*#__PURE__*/_react["default"].createElement(_reactIntl.FormattedMessage, {
        id: 'loadRemoteMap.cors'
      }), ' ', /*#__PURE__*/_react["default"].createElement(_reactIntl.FormattedHTMLMessage, {
        id: 'loadRemoteMap.clickHere',
        values: {
          corsLink: _defaultSettings.CORS_LINK
        }
      })), /*#__PURE__*/_react["default"].createElement(StyledFromGroup, null, /*#__PURE__*/_react["default"].createElement(StyledInput, {
        onChange: this.onMapUrlChange,
        type: "text",
        placeholder: "Url",
        value: this.state.dataUrl,
        error: displayedError
      }), /*#__PURE__*/_react["default"].createElement(_components.Button, {
        type: "submit",
        cta: true,
        size: "small",
        onClick: this.onLoadRemoteMap
      }, /*#__PURE__*/_react["default"].createElement(_reactIntl.FormattedMessage, {
        id: 'loadRemoteMap.fetch'
      }))), displayedError && /*#__PURE__*/_react["default"].createElement(Error, {
        error: displayedError,
        url: (_this$props$option = this.props.option) === null || _this$props$option === void 0 ? void 0 : _this$props$option.dataUrl
      })));
    }
  }]);
  return LoadRemoteMap;
}(_react.Component);
LoadRemoteMap.propTypes = propTypes;
var _default = LoadRemoteMap;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,