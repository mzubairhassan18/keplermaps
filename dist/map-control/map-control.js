"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LinkButton = void 0;
exports.SampleMapPanel = SampleMapPanel;
var _react = _interopRequireWildcard(require("react"));
var _classnames = _interopRequireDefault(require("classnames"));
var _styledComponents = _interopRequireDefault(require("styled-components"));
var _components = require("@kepler.gl/components");
var _reactMarkdown = _interopRequireDefault(require("react-markdown"));
var _templateObject, _templateObject2, _templateObject3; // Copyright (c) 2023 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }
var StyledFloatingPanel = _styledComponents["default"].div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  margin-right: 12px;\n  margin-top: 20px;\n"])));
var StyledProjectPanel = _styledComponents["default"].div(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  background: ", ";\n  padding: 16px 20px;\n  width: 280px;\n  box-shadow: ", ";\n\n  .project-title {\n    color: ", ";\n    font-size: 13px;\n    font-weight: 500;\n    display: flex;\n    justify-content: space-between;\n  }\n\n  .project-description {\n    color: ", ";\n    font-size: 11px;\n    margin-top: 12px;\n\n    a {\n      font-weight: 500;\n      color: ", ";\n    }\n  }\n\n  .project-links {\n    margin-top: 20px;\n    width: 100%;\n    display: flex;\n    align-items: center;\n    justify-content: flex-end;\n  }\n"])), function (props) {
  return props.theme.panelBackground;
}, function (props) {
  return props.theme.panelBoxShadow;
}, function (props) {
  return props.theme.titleTextColor;
}, function (props) {
  return props.theme.textColor;
}, function (props) {
  return props.theme.titleTextColor;
});
var StyledPanelAction = _styledComponents["default"].div(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  border-radius: 2px;\n  margin-left: 4px;\n  padding: 5px;\n  font-weight: 500;\n\n  a {\n    align-items: center;\n    justify-content: flex-start;\n    display: flex;\n    height: 16px;\n    padding-right: 10px;\n    color: ", ";\n\n    svg {\n      margin-right: 8px;\n    }\n  }\n\n  :hover {\n    cursor: pointer;\n    a {\n      color: ", ";\n    }\n  }\n"])), function (props) {
  return props.active ? props.theme.textColorHl : props.theme.subtextColor;
}, function (props) {
  return props.theme.textColorHl;
});
var LinkButton = function LinkButton(props) {
  return /*#__PURE__*/_react["default"].createElement(StyledPanelAction, {
    className: "project-link__action"
  }, /*#__PURE__*/_react["default"].createElement("a", {
    target: "_blank",
    rel: "noopener noreferrer",
    href: props.href
  }, /*#__PURE__*/_react["default"].createElement(props.iconComponent, {
    height: props.height || '16px'
  }), /*#__PURE__*/_react["default"].createElement("p", null, props.label)));
};
exports.LinkButton = LinkButton;
var CloseButton = function CloseButton(_ref) {
  var onClick = _ref.onClick;
  return /*#__PURE__*/_react["default"].createElement(_components.IconRoundSmall, null, /*#__PURE__*/_react["default"].createElement(_components.Icons.Close, {
    height: "16px",
    onClick: onClick
  }));
};
var LinkRenderer = function LinkRenderer(props) {
  return /*#__PURE__*/_react["default"].createElement("a", {
    href: props.href,
    target: "_blank",
    rel: "noopener noreferrer"
  }, props.children);
};

// convert https://raw.githubusercontent.com/uber-web/kepler.gl-data/master/nyctrips/config.json
// to https://github.com/uber-web/kepler.gl-data/blob/master/movement_pittsburgh/config.json
function getURL(url) {
  return url ? url.replace('https://raw.githubusercontent.com', 'https://github.com').replace('master', 'blob/master') : url;
}
function SampleMapPanel(props) {
  var _useState = (0, _react.useState)(true),
    _useState2 = _slicedToArray(_useState, 2),
    isActive = _useState2[0],
    setActive = _useState2[1];
  return /*#__PURE__*/_react["default"].createElement(StyledFloatingPanel, null, isActive ? /*#__PURE__*/_react["default"].createElement(StyledProjectPanel, null, /*#__PURE__*/_react["default"].createElement("div", {
    className: "project-title"
  }, /*#__PURE__*/_react["default"].createElement("div", null, props.currentSample.label), /*#__PURE__*/_react["default"].createElement(CloseButton, {
    onClick: function onClick() {
      return setActive(false);
    }
  })), /*#__PURE__*/_react["default"].createElement("div", {
    className: "project-description"
  }, /*#__PURE__*/_react["default"].createElement(_reactMarkdown["default"], {
    source: props.currentSample.detail || props.currentSample.description,
    renderers: {
      link: LinkRenderer
    }
  })), /*#__PURE__*/_react["default"].createElement("div", {
    className: "project-links"
  }, /*#__PURE__*/_react["default"].createElement(LinkButton, {
    label: "Data",
    href: getURL(props.currentSample.dataUrl),
    iconComponent: _components.Icons.Files,
    height: "15px"
  }), /*#__PURE__*/_react["default"].createElement(LinkButton, {
    label: "Config",
    href: getURL(props.currentSample.configUrl),
    iconComponent: _components.Icons.CodeAlt,
    height: "17px"
  }))) : /*#__PURE__*/_react["default"].createElement(_components.MapControlButton, {
    className: (0, _classnames["default"])('map-control-button', 'info-panel', {
      isActive: isActive
    }),
    onClick: function onClick(e) {
      e.preventDefault();
      setActive(true);
    }
  }, /*#__PURE__*/_react["default"].createElement(_components.Icons.Docs, {
    height: "18px"
  })));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,